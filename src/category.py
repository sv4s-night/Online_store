class Category:
    name: str
    description: str
    products: list

    category_count = 0
    product_count = 0

    def __init__(self, name, description, products=None):
        self.name = name
        self.description = description
        self.__products = products if products else []

        Category.product_count += 1
        Category.category_count += len(products)


    """ Задание 1
Для класса Category сделайте список товаров приватным атрибутом, чтобы к нему нельзя было получить доступ извне. 
Для добавления товаров в категорию реализуйте специальный метод add_product() в классе Category, 
в который нужно передавать объект класса Product и уже его записывать в приватный атрибут списка товаров.

Подсказка
Задание посвящено работе с приватными атрибутами, к которым нельзя обращаться от объекта, 
но можно обращаться внутри класса. Чтобы не нарушить функционирование нашей программы, 
мы создаем специальный метод, который позволит добавлять продукты в категории.
    """


    def add_product(self, products):
        self.__products.append(products)


    @property
    def products(self):
        products_str = ""
        for product in self.__products:
            products_str += f"Название продукта, {product.price} руб. Остаток: {product.quantity} шт.\n"
        return products_str

    """ Задание 2
Так как вы сделали атрибут со списком товаров приватным, то атрибут «список товаров категории» у вас освободился, 
но вы лишили программу возможности выводить список товаров. Чтобы вернуть возможность просмотра товаров, 
нужно реализовать геттер, который будет выводить список товаров в виде строк в формате:
    Название продукта, 80 руб. Остаток: 15 шт.
    
    Подсказка
Используйте декоратор property для создания геттера с выводом списка товаров. 
Геттер должен возвращать строку, чтобы пользователь класса мог их распечатать или записать в какой-то другой интерфейс.
    """